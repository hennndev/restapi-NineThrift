// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}


model User {
    id        Int       @id @default(autoincrement())
    username  String
    email     String    @unique
    password  String
    role      Role      @default(USER)      
    profile   Json
    orders    Order[]   @relation("UserOrders")
    createdAt DateTime  @default(now())
}

model Product {
    id          Int         @id @default(autoincrement())
    name        String
    image       String
    price       Int
    categoryId  Int         
    category    Category    @relation(fields: [categoryId], references: [id])
    brandId     Int         
    brand       Brand       @relation(fields: [brandId], references: [id])
    description String
    discount    Json
    ProductOrder ProductOrder[]
    createdAt   DateTime    @default(now())


    @@index([brandId])
    @@index([categoryId])
}

model Category {
    id          Int         @id @default(autoincrement())
    category    String      @unique
    products    Product[]
    createdAt   DateTime    @default(now())
}

model Brand {
    id          Int         @id @default(autoincrement())
    brand       String      @unique
    products    Product[]
    createdAt   DateTime    @default(now())
}

model Order {
    id          String      @id
    status      OrderStatus @default(PENDING)    
    totalOrders Int
    userId      Int         
    user        User        @relation("UserOrders", fields: [userId], references: [id])
    products    ProductOrder[]    
    createdAT   DateTime    @default(now())

    @@index([userId])
}

model ProductOrder {
    orderId     String      @unique
    quantity    Int 
    productId   Int         @unique

    order       Order       @relation(fields: [orderId], references: [id])
    product     Product     @relation(fields: [productId], references: [id])

    @@id([orderId, productId])
}


enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING    
  PROCESSING 
  COMPLETED  
  CANCELLED 
}
